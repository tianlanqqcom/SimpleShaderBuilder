/*
*	Created by tianlan. Last Edit: 2023/04/02 22:35
*	The file includes a ShaderBuilder class to help using shader in openGL.
*	Defines Vector3float and Vector4float.
*	All definations are defined in namespace GLHelper.
* 
*	The ShaderBuilder helps:
*	* Set and compile your output color
*	* Link the shader program
*	* Get the linked program
*	* If needed, changed the input shader or output shader, warning that the behavior is not suggested.
* 
*	Usage:
* 
	glfwMakeContextCurrent(window);  // Should make context before the initialization of ShaderBuilder
	...
	GLHelper::ShaderBuilder sbuilder;
    GLuint shaderProgram;
	...
	while(true)
	{
		...
		shaderProgram = sbuilder.GetShaderProgram(1.0f, 0.0f, 0.0f);
        glUseProgram(shaderProgram);
		glDrawXXX();
		...
	}
*/
#pragma once
#include <string>
#include <map>
#include <format>
#include <opengl/glew.h>

namespace GLHelper 
{
	typedef struct
	{
		float red, green, blue;
	}Vector3float;

	class Vector4float
	{
	public:
		float red, green, blue, alpha;

		// Comparison operator for sorting Vector4float objects in a map
		bool operator < (const Vector4float& _Right) const
		{
			if (this->red < _Right.red)
			{
				return true;
			}
			else if (this->red > _Right.red)
			{
				return false;
			}

			if (this->green < _Right.green)
			{
				return true;
			}
			else if (this->green > _Right.green)
			{
				return false;
			}

			if (this->blue < _Right.blue)
			{
				return true;
			}
			else if (this->blue > _Right.blue)
			{
				return false;
			}

			if (this->alpha < _Right.alpha)
			{
				return true;
			}
			else if (this->alpha > _Right.alpha)
			{
				return false;
			}
			return false;
		}

		bool operator == (const Vector4float& _Right) const
		{
			return (this->red == _Right.red &&
				this->green == _Right.green &&
				this->blue == _Right.blue &&
				this->alpha == _Right.alpha);
		}

		bool operator > (const Vector4float& _Right) const
		{
			return (*this < _Right) ? false : !(*this == _Right);
		}

		bool operator()(const Vector4float& _Left, const Vector4float& _Right) const
		{	
			return _Left < _Right;
		}
	};

	class ShaderBuilder
	{
		// Cache for compiled output shaders, mapped to their corresponding color.
		std::map<Vector4float, GLuint> compiledOutputShaderCache;

		// Cache for linked shader programs, mapped to their corresponding color
		std::map<Vector4float, GLuint> linkedProgramCache;

		// Cache for senior shader program, mapped to the markId provided by the user.
		std::map<int, GLuint> seniorShaderProgramCache;

		// Default input shader source code
		const GLchar* inputShaderSource =
			"#version 330 core\n"
			"layout (location = 0) in vec3 position;\n"
			"void main()\n"
			"{\n"
			"gl_Position = vec4(position.x, position.y, position.z, 1.0);\n"
			"}\0";

		// Output shader source code generated by ShaderBuilder
		std::string outputShaderSource;
		// Output shader source code as a C-style string, the same as the string above
		GLchar* outputShaderSource_c = new GLchar[512];

		// OpenGL handles for input shader, output shader, and shader program
		GLuint inputShader = 0;
		GLuint outputShader = 0;
		GLuint shaderProgram = 0;

		// Marks whether the input shader has been changed
		bool inputShaderChanged = false;

		// Initializes ShaderBuilder object
		bool InitShaderBuilder();

		// Copies a std::string to a GLchar* buffer, it is a helper function and should not be invoked outside of class
		bool strcpy_glchar(GLchar* dest, const std::string& source);

		// Sets outputShaderSource based on color
		void SetOutputShaderSource(const Vector3float& vec3);
		void SetOutputShaderSource(const Vector4float& vec4);
		void SetOutputShaderSource(const float red, const float green, const float blue, const float alpha = 1.0f);

		// Builds outputShader with the present output shader source
		bool BuildOutputShaderSource();

		// The fast approach for setting and building the output shader source
		bool SetAndBuildOutputShaderSource(const Vector3float& vec3);
		bool SetAndBuildOutputShaderSource(const Vector4float& vec4);
		bool SetAndBuildOutputShaderSource(const float red, const float green, const float blue, const float alpha = 1.0f);

		// Links the input shader and the output shader
		bool LinkProgram();

		// Returns the present GL handle for the present shader program
		const GLuint GetShaderProgram() const;
	public:
		// Constructors.
		ShaderBuilder();
		~ShaderBuilder();

		// A method to set your own input shader
		// Warning: if failed to compile your input shader source, 
		//			the function will return false and change to the default input shader
		bool SetInputShader(const GLchar* newInputShader);

		// A method to support your own output shader
		// Warning: 1. the markID should be managed by yourself
		//			2. if failed to compile the shader, the function will return 0
		//			3. if you want to use your own input shader, SetInputShader should be called earlier than this function,
		//			   the function just link present input shader with the new shader.
		const GLuint GetUniqueShaderProgram(const int markId, const GLchar* shaderSource);

		// If your program has already been registered, use the finction to get the GL handle for it
		const GLuint GetUniqueShaderProgram(const int markId);

		// Returns the GL handle for the shader program based on the color
		const GLuint GetShaderProgram(const Vector3float& color);
		const GLuint GetShaderProgram(const Vector4float& color);
		const GLuint GetShaderProgram(const float red, const float green, const float blue, const float alpha = 1.0f);

		
	};
}
